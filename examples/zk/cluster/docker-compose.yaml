#############################################################
# Kafka Cluster with ZooKeeper                              #
# 3x ZooKeeper + 3x broker                                  #
#############################################################
---
version: '2.4'
services:
    
    #############################################################
    # Zookeeper                                                 #
    #############################################################
    zookeeper1:
        image: zookeeper:${ZOOKEEPER_VERSION}
        restart: always
        hostname: zookeeper1
        ports:
            - 12181:2181
            - 18080:8080
            - 17070:7070
        volumes:
            - zookeeper1_data:/data
            - zookeeper1_datalog:/datalog
        # https://hub.docker.com/_/zookeeper
        environment:
            ZOO_MY_ID: 1 # (required in cluster mode) Sets the server ID in the myid file, which consists of a single line that contains only the text of that machine’s ID.
            ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
            ZOO_TICK_TIME: 2000 # (default: 3000) The unit of time for ZooKeeper translated to milliseconds. This governs all ZooKeeper time dependent operations. It is used for heartbeats and timeouts especially.
            # The initLimit and syncLimit are used to govern how long following ZooKeeper servers can take to initialize with the current leader and how long they can be out of sync with the leader.
            ZOO_INIT_LIMIT: 5 # (default: 10)
            ZOO_SYNC_LIMIT: 2 # (default: 5)
            # Four letter words
            ZOO_4LW_COMMANDS_WHITELIST: "*" #(default: srvr) A list of comma separated Four Letter Words commands that user wants to use.
            ZOO_ADMINSERVER_ENABLED: "true" #(default: true) The server is started on port 8080, and commands are issued by going to the URL "/commands/[command name]"
            # Metrics
            ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7070 metricsProvider.exportJvmInfo=true"

    zookeeper2:
        image: zookeeper:${ZOOKEEPER_VERSION}
        restart: always
        hostname: zookeeper2
        ports:
            - 22181:2181
            - 28080:8080
            - 27070:7070
        volumes:
            - zookeeper2_data:/data
            - zookeeper2_datalog:/datalog
        # https://hub.docker.com/_/zookeeper
        environment:
            ZOO_MY_ID: 2 # (required in cluster mode) Sets the server ID in the myid file, which consists of a single line that contains only the text of that machine’s ID.
            ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
            ZOO_INIT_LIMIT: 5 # (default: 10)
            ZOO_SYNC_LIMIT: 2 # (default: 5)
            # Four letter words
            ZOO_4LW_COMMANDS_WHITELIST: "*" #(default: srvr) A list of comma separated Four Letter Words commands that user wants to use.
            ZOO_ADMINSERVER_ENABLED: "true" #(default: true) The server is started on port 8080, and commands are issued by going to the URL "/commands/[command name]"
            # Metrics
            ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7070 metricsProvider.exportJvmInfo=true"


    zookeeper3:
        image: zookeeper:${ZOOKEEPER_VERSION}
        restart: always
        hostname: zookeeper3
        ports:
            - 32181:2181
            - 38080:8080
            - 37070:7070
        volumes:
            - zookeeper3_data:/data
            - zookeeper3_datalog:/datalog
        # https://hub.docker.com/_/zookeeper
        environment:
            ZOO_MY_ID: 3 # (required in cluster mode) Sets the server ID in the myid file, which consists of a single line that contains only the text of that machine’s ID.
            ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
            ZOOKEEPER_TICK_TIME: 2000 # (default: 3000) The unit of time for ZooKeeper translated to milliseconds. This governs all ZooKeeper time dependent operations. It is used for heartbeats and timeouts especially.
            # The initLimit and syncLimit are used to govern how long following ZooKeeper servers can take to initialize with the current leader and how long they can be out of sync with the leader.
            ZOO_INIT_LIMIT: 5 # (default: 10)
            ZOO_SYNC_LIMIT: 2 # (default: 5)
            # Four letter words
            ZOO_4LW_COMMANDS_WHITELIST: "*" #(default: srvr) A list of comma separated Four Letter Words commands that user wants to use.
            ZOO_ADMINSERVER_ENABLED: "true" #(default: true) The server is started on port 8080, and commands are issued by going to the URL "/commands/[command name]"
            # Metrics
            ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7070 metricsProvider.exportJvmInfo=true"


    #############################################################
    # Kafka Broker                                              #
    #############################################################
    kafka-broker1:
        image: ueisele/apache-kafka-server:${KAFKA_VERSION}
        restart: always
        ports:
            - 19092:19092
        networks:
            default:
                aliases:
                    - kafka
        volumes:
            - kafka-broker1:/opt/apache/kafka/data
        environment:
            #### Server Basics ####
            KAFKA_NODE_ID: 101 # (default: -1, required in KRaft mode) The node id for this server.
            KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181 # (required) Instructs Kafka how to get in touch with ZooKeeper.
            #### Socket Server Settings ###
            KAFKA_ADVERTISED_LISTENERS: HOST://localhost:19092,PLAINTEXT://kafka-broker1:9092 # (required) Describes how the host name that is advertised and can be reached by clients. HOST://localhost:19092 enables access from Docker host.
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL # (default: PLAINTEXT:PLAINTEXT,...) Map between listener names and security protocols. In this scenario this setting is used to define listeners with names.

    kafka-broker2:
        image: ueisele/apache-kafka-server:${KAFKA_VERSION}
        restart: always
        ports:
            - 29092:29092
        networks:
            default:
                aliases:
                    - kafka
        volumes:
            - kafka-broker2:/opt/apache/kafka/data
        environment:
            #### Server Basics ####
            KAFKA_NODE_ID: 102 # (default: -1, required in KRaft mode) The node id for this server.
            KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181 # (required) Instructs Kafka how to get in touch with ZooKeeper.
            #### Socket Server Settings ###
            KAFKA_ADVERTISED_LISTENERS: HOST://localhost:29092,PLAINTEXT://kafka-broker2:9092 # (required) Describes how the host name that is advertised and can be reached by clients. HOST://localhost:19092 enables access from Docker host.
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL # (default: PLAINTEXT:PLAINTEXT,...) Map between listener names and security protocols. In this scenario this setting is used to define listeners with names.

    kafka-broker3:
        image: ueisele/apache-kafka-server:${KAFKA_VERSION}
        restart: always
        ports:
            - 39092:39092
        networks:
            default:
                aliases:
                    - kafka
        volumes:
            - kafka-broker3:/opt/apache/kafka/data
        environment:
            #### Server Basics ####
            KAFKA_NODE_ID: 103 # (default: -1, required in KRaft mode) The node id for this server.
            KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181 # (required) Instructs Kafka how to get in touch with ZooKeeper.
            #### Socket Server Settings ###
            KAFKA_ADVERTISED_LISTENERS: HOST://localhost:39092,PLAINTEXT://kafka-broker3:9092 # (required) Describes how the host name that is advertised and can be reached by clients. HOST://localhost:19092 enables access from Docker host.
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL # (default: PLAINTEXT:PLAINTEXT,...) Map between listener names and security protocols. In this scenario this setting is used to define listeners with names.

volumes:
    zookeeper1_data:
    zookeeper1_datalog:
    zookeeper2_data:
    zookeeper2_datalog:
    zookeeper3_data:
    zookeeper3_datalog:
    kafka-broker1:
    kafka-broker2:
    kafka-broker3:
