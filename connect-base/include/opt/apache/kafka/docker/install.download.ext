#!/usr/bin/env bash
set -e

function download () {
  local path="${1:?Requires relative target path as first parameter!}"
  local url="${2:?Requires url as second parameter!}"
  local filename="$(basename "${url}")"
  mkdir -p "${PLUGIN_INSTALL_DIR}/${path}"
  if [[ ${filename} == *.zip ]]; then
    (
      cd "${PLUGIN_INSTALL_DIR}/${path}"
      curl -L -o "${filename}" "${url}"
      unzip -o "${filename}"
      rm "${filename}"
    )
  elif [[ ${filename} == *.tar* ]] || [[ ${filename} == *.tgz ]]; then
    curl -L "${url}" | tar -zx -C "${PLUGIN_INSTALL_DIR}/${path}/"
  elif [[ ${filename} == *.jar ]]; then
    curl -L -o "${PLUGIN_INSTALL_DIR}/${path}/${filename}" "${url}"     
  else
    echo "Could not install '${filename}', because extension is not supported!"
    return 1
  fi
}

# download and install connect plugins via url
# example:
#   https://github.com/castorm/kafka-connect-http/releases/download/v0.8.11/castorm-kafka-connect-http-0.8.11.zip
#   https://github.com/RedHatInsights/expandjsonsmt/releases/download/0.0.7/kafka-connect-smt-expandjsonsmt-0.0.7.tar.gz
function installPluginsByUrl () {
  local urls="${1:?Requires urls as first parameter!}"
  for url in $(sed "s/,/ /g" <<< ${urls}); do 
    local filename="$(basename "${url}")"
    local name="$(sed 's/\(-v\?[0-9]\+\)\?\..*$//' <<< "${filename}")"
    download "${name}" "${url}"
  done
}

# download libraries to existing plugin folders
# example:
#   confluentinc-kafka-connect-jdbc/lib=https://dlm.mariadb.com/1496775/Connectors/java/connector-java-2.7.2/mariadb-java-client-2.7.2.jar
#   confluentinc-kafka-connect-avro-converter/lib=https://repo1.maven.org/maven2/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar
function downloadLibs () {
  local libs="${1:?Requires libs as first parameter!}"
  for lib in $(sed "s/,/ /g" <<< ${libs}); do
    if [[ "${lib}" =~ .*=.* ]]; then
      local path=$(cut -d$'=' -f1 <<< "${lib}")
      local url=$(cut -d$'=' -f2 <<< "${lib}")
      local filename="$(basename "${url}")"
      download "${path}" "${url}"
    else
      echo "Could not install '${lib}', because 'path=url' pair expected!"
      return 1
    fi
  done
}

function doInstallFromEnv () {
  if [ -n "${PLUGIN_INSTALL_URLS:-}" ] || [ -n "${CONNECT_PLUGIN_INSTALL_EXTENSION_URLS:-}" ]; then
    installPluginsByUrl "${PLUGIN_INSTALL_URLS:-"${CONNECT_PLUGIN_INSTALL_EXTENSION_URLS}"}"
  fi
  if [ -n "${PLUGIN_INSTALL_LIB_URLS:-}" ]; then
    downloadLibs "${PLUGIN_INSTALL_LIB_URLS}"
  fi
}

function extUsageOptions () {
  echo -n "[--urls url_1,url_n] [--lib-urls path_1=url_1,path_n=url_n]"
}

function extMain () {
  if [ -z "${PLUGIN_INSTALL_DIR:-}" ]; then
    echo "Requires PLUGIN_INSTALL_DIR environment variable!"
    return 1
  fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --urls)
          shift
          local hasNext=true
          while [[ ${hasNext} = true ]]; do
            case "$1" in
                ""|--*)
                    hasNext=false
                    ;;
                *)
                    PLUGIN_INSTALL_URLS="${PLUGIN_INSTALL_URLS} ${1}"
                    shift
                    ;;
            esac
          done
          ;; 
      --lib-urls)
          shift
          local hasNext=true
          while [[ ${hasNext} = true ]]; do
            case "$1" in
                ""|--*)
                    hasNext=false
                    ;;
                *)
                    PLUGIN_INSTALL_LIB_URLS="${PLUGIN_INSTALL_LIB_URLS} ${1}"
                    shift
                    ;;
            esac
          done
          ;; 
      *)
          shift
          ;;
    esac
  done

  doInstallFromEnv
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
  extMain "$@"
fi